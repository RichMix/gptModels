# ctfChad2
#To set up a custom OpenAPI tool for OpenAI, there are some specific requirements in the schema format. I’ll refine the spec to follow OpenAI’s specific requirements for tool integrations:

# Only one server URL (no description).
# Each endpoint should have an operationId and summary.
# Remove any descriptions beyond those in summary fields to keep it concise for OpenAI tool integration.
# Here’s the modified OpenAPI schema for use with OpenAI’s system:

openapi: 3.1.0
info:
  title: NCL Cyber Tool API
  version: 1.0.2
servers:
  - url: https://api.nclcybertools.com

paths:
  /detectBase:
    post:
      operationId: detectBase
      summary: Detects the base of a given number, such as binary or hexadecimal.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: string
                  description: The number string to analyze for base detection.
      responses:
        '200':
          description: Successfully detected base and confidence level.
          content:
            application/json:
              schema:
                type: object
                properties:
                  base:
                    type: string
                    description: Detected base of the number.
                  confidence:
                    type: number
                    format: float
                    description: Confidence level.
        '400':
          description: Invalid input format

  /crackPassword:
    post:
      operationId: crackPassword
      summary: Attempts to crack a hashed password using the specified hash type.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hash:
                  type: string
                  description: The hashed password.
                hashType:
                  type: string
                  description: Type of hash (e.g., MD5, SHA-256).
      responses:
        '200':
          description: Cracked password result.
          content:
            application/json:
              schema:
                type: object
                properties:
                  password:
                    type: string
                    description: The cracked password, if successful.
                  success:
                    type: boolean
                    description: Indicates if cracking was successful.
        '400':
          description: Invalid hash format or unsupported hash type

  /decryptMessage:
    post:
      operationId: decryptMessage
      summary: Decrypts a given encrypted message using the provided key and algorithm.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ciphertext:
                  type: string
                  description: The encrypted message.
                algorithm:
                  type: string
                  description: Encryption algorithm (e.g., AES, DES).
                key:
                  type: string
                  description: The decryption key.
      responses:
        '200':
          description: Successfully decrypted message.
          content:
            application/json:
              schema:
                type: object
                properties:
                  plaintext:
                    type: string
                    description: The decrypted message.
        '400':
          description: Invalid input or unsupported algorithm
        '401':
          description: Decryption failed due to incorrect key or algorithm

# This version is now optimized for OpenAI’s schema requirements and should be ready for upload as a custom tool! Let me know if you need further adjustments.
